Index: lib/pages/community/posting_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:async';\r\nimport 'dart:io';\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'package:image_picker/image_picker.dart';\r\nimport 'package:pet/common/component/appbars/post_appbar.dart';\r\nimport 'package:pet/common/component/dialogs/commonDialog.dart';\r\nimport 'package:pet/const/category_list.dart';\r\nimport 'package:pet/providers/posting_notifier_provider.dart';\r\nimport '../../api/postPosting.dart';\r\nimport '../../style/colors.dart';\r\n\r\n\r\n// 추후 수정 예정.\r\nclass PostingPage extends ConsumerWidget {\r\n\r\n  const PostingPage({super.key});\r\n\r\n  void confirmTitle(BuildContext context){\r\n    showDialog(context: context, builder: (context){\r\n      return CommonDialog(content: '제목을 입력해주세요');\r\n    });\r\n  }\r\n\r\n  void confirmBody(BuildContext context){\r\n    showDialog(context: context,builder: (context){\r\n      return CommonDialog(content: '내용을 입력해주세요');\r\n    });\r\n  }\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    //postProvider 초기화\r\n    ref.invalidate(PostingProvider);\r\n\r\n    void postPostingData() async{\r\n      final state = ref.watch(PostingProvider);\r\n      ref.watch(PostingProvider.notifier).updatePosting(\r\n        //userId 고정\r\n          owner_id: 1\r\n      );\r\n\r\n      if(state.title == ''){\r\n        confirmTitle(context);\r\n      }\r\n\r\n      if(state.category != '' && state.body == ''){\r\n        confirmBody(context);\r\n      }\r\n\r\n      if(state.category != '' && state.title != '' && state.body != '' ){\r\n        print('------------------------------------------------------------송신');\r\n        print(state.title);\r\n        print(state.body);\r\n        print(state.category);\r\n        await PostPosting.postPosting(\r\n            owner_id: 1,\r\n            title: state.title ?? '제목없음',\r\n            body: state.body,\r\n            category: state.category,\r\n            imagePaths: null ?? state.imagePaths\r\n        );\r\n        ref.invalidate(PostingProvider);\r\n        Navigator.pop(context);\r\n      }\r\n    }\r\n\r\n    return Scaffold(\r\n        appBar: PostAppBar( postPostingData ),\r\n        body: GestureDetector(\r\n          onDoubleTap: (){\r\n            FocusManager.instance.primaryFocus?.unfocus();\r\n          },\r\n          child: Container(\r\n            color: WHITE,\r\n            child: Column(\r\n              children: [\r\n                Expanded(\r\n                    child: _Body()),\r\n                _BottomAppBar()\r\n              ],\r\n            ),\r\n          ),\r\n        ),\r\n      resizeToAvoidBottomInset: false,\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass _Body extends ConsumerWidget {\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    final state = ref.watch(PostingProvider);\r\n    return SingleChildScrollView(\r\n      child: Padding(\r\n        padding: EdgeInsets.symmetric(\r\n            horizontal: 20,\r\n            vertical: 20\r\n        ),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Padding(padding: EdgeInsets.only(bottom: 10)),\r\n            TitleInput(),\r\n\r\n            Padding(padding: EdgeInsets.only(bottom: 10)),\r\n            Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              mainAxisSize: MainAxisSize.max,\r\n              children: [\r\n                Padding(\r\n                  padding: EdgeInsets.only(bottom: 10),\r\n                  child: state.imagePaths != null ?\r\n                  Column(\r\n                      children: state.imagePaths!.map(\r\n                              (e) => Image.file(File(e), width: 300, height: 300, fit: BoxFit.fitWidth,)).toList()\r\n                  ) : null,\r\n                ),\r\n                BodyInput()\r\n              ],\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\nclass TitleInput extends ConsumerWidget {\r\n  const TitleInput({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n\r\n    return TextFormField(\r\n      onChanged: (e){\r\n        ref.read(PostingProvider.notifier).updatePosting(title: e);\r\n      },\r\n      textInputAction: TextInputAction.next,\r\n      style : Theme.of(context).textTheme.bodyLarge,\r\n      decoration: const InputDecoration(\r\n        hintText: '제목',\r\n        hintStyle: TextStyle(\r\n            fontSize: 20,\r\n            color: GREY1\r\n        ),\r\n        enabledBorder:  UnderlineInputBorder(\r\n            borderSide: BorderSide(width: 1, color: Colors.grey)\r\n        ),\r\n        focusedBorder: UnderlineInputBorder(\r\n            borderSide: BorderSide(width: 1, color: Colors.grey)\r\n        ),\r\n        border: UnderlineInputBorder(\r\n            borderSide: BorderSide(width: 1, color: Colors.grey)\r\n        ),\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nclass BodyInput extends ConsumerWidget {\r\n  const BodyInput({super.key});\r\n  static const _hintText = \"\"\"\r\n본문 내용을 적어주세요.\r\n사진은 최대 5장까지 업로드 가능합니다.\r\n\r\n남을 비방하거나 욕설 등의 부적절한 글은 삼가주세요.\"\"\";\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n\r\n    return TextFormField(\r\n      onChanged: (e){\r\n        ref.read(PostingProvider.notifier).updatePosting(body: e);\r\n      },\r\n      style: Theme.of(context).textTheme.bodyMedium,\r\n      decoration: const InputDecoration(\r\n          hintText: _hintText,\r\n          enabledBorder:  UnderlineInputBorder(\r\n              borderSide: BorderSide(width: 0, color: Colors.white)\r\n          ),\r\n          border: UnderlineInputBorder(\r\n              borderSide: BorderSide(width: 0, color: Colors.white)\r\n          ),\r\n          focusedBorder: UnderlineInputBorder(\r\n              borderSide: BorderSide(width: 0, color: Colors.white)\r\n          )\r\n      ),\r\n      keyboardType: TextInputType.multiline,\r\n      minLines: 20,\r\n      maxLines: null,\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass _BottomAppBar extends ConsumerWidget {\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n\r\n    return Container(\r\n      padding: EdgeInsets.only(\r\n          right: 10,\r\n          left: 10,\r\n          // 하단 탭바 높이만큼 더 올라가더라,, 그거 빼줘야함\r\n          bottom:MediaQuery.of(context).viewInsets.bottom + 10 ,\r\n          top: 10 ),\r\n      decoration: const BoxDecoration(\r\n          border: Border(\r\n              top: BorderSide(\r\n                  color: Colors.grey,\r\n                  width: 0.5\r\n              )\r\n          )\r\n      ),\r\n      child: Row(\r\n        children: [\r\n          IconButton(\r\n            onPressed: ()async{\r\n              var picker = ImagePicker();\r\n              final List<XFile>? images = await picker.pickMultiImage();\r\n              if(images != null) {\r\n                final imagePaths = images.map((e) => e.path).toList();\r\n                ref.watch(PostingProvider.notifier).updatePosting(\r\n                    images: imagePaths);\r\n              }\r\n            }, icon: const Icon(Icons.camera_alt),color: PRIMARY_COLOR,),\r\n          const Spacer(),\r\n          PostCategoryWidget(),\r\n\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass PostCategoryWidget extends ConsumerWidget {\r\n\r\n  const PostCategoryWidget({super.key,});\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    final state = ref.watch(PostingProvider);\r\n    return Row(\r\n        children:\r\n        categoryList.map((categoryName) =>\r\n\r\n            Padding(\r\n              padding: const EdgeInsets.symmetric(vertical: 0, horizontal: 5),\r\n              child: Container(\r\n                padding: EdgeInsets.zero,\r\n                decoration: BoxDecoration(\r\n                  color: state.category == categoryName ? PRIMARY_COLOR : WHITE,\r\n                  border: Border.all(width: 1, color: PRIMARY_COLOR),\r\n                  borderRadius: BorderRadius.all(Radius.circular(20))\r\n                ),\r\n                child: TextButton(\r\n                  style: TextButton.styleFrom(\r\n                    padding: EdgeInsets.symmetric(vertical: 0, horizontal: 10),\r\n                    foregroundColor: PRIMARY_COLOR,\r\n                  ),\r\n                    onPressed: () {\r\n                      ref.watch(PostingProvider.notifier).updatePosting(category: categoryName);\r\n                    },\r\n                    child: Text(categoryName,\r\n                        style: TextStyle(\r\n                          color: state.category == categoryName ? WHITE : PRIMARY_COLOR,\r\n                          fontWeight: FontWeight.w700,\r\n                        ))),\r\n              ),\r\n            )\r\n        ).toList()\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/community/posting_page.dart b/lib/pages/community/posting_page.dart
--- a/lib/pages/community/posting_page.dart	(revision 388746464991c691649236f4402ff4af6b576a08)
+++ b/lib/pages/community/posting_page.dart	(date 1713892876264)
@@ -17,44 +17,36 @@
 
   const PostingPage({super.key});
 
-  void confirmTitle(BuildContext context){
+  void showCommonDialog({required String content, required BuildContext context}){
     showDialog(context: context, builder: (context){
-      return CommonDialog(content: '제목을 입력해주세요');
-    });
-  }
-
-  void confirmBody(BuildContext context){
-    showDialog(context: context,builder: (context){
-      return CommonDialog(content: '내용을 입력해주세요');
+      return CommonDialog(content: content);
     });
   }
 
-
-  @override
-  Widget build(BuildContext context, WidgetRef ref) {
-    //postProvider 초기화
-    ref.invalidate(PostingProvider);
-
-    void postPostingData() async{
-      final state = ref.watch(PostingProvider);
-      ref.watch(PostingProvider.notifier).updatePosting(
-        //userId 고정
-          owner_id: 1
-      );
+  void postPostingData(BuildContext context, WidgetRef ref) async{
+    final state = ref.watch(PostingProvider);
+    ref.read(PostingProvider.notifier).updatePosting(
+      //userId 고정
+        owner_id: 1
+    );
+    print('--------------------------------------');
+    print(state.title);
 
-      if(state.title == ''){
-        confirmTitle(context);
-      }
-
-      if(state.category != '' && state.body == ''){
-        confirmBody(context);
-      }
-
-      if(state.category != '' && state.title != '' && state.body != '' ){
-        print('------------------------------------------------------------송신');
-        print(state.title);
-        print(state.body);
-        print(state.category);
+    if(state.title == ''){
+      showCommonDialog(content: '제목을 입력해주세요', context: context);
+    }
+    if(state.title != '' && state.body == ''){
+      showCommonDialog(content:'내용을 입력해주세요', context: context);
+    }
+    if(state.title != '' && state.body != '' && state.category == ''){
+      showCommonDialog(content: '카테고리를 선택해주세요', context: context);
+    }
+    if(state.category != '' && state.title != '' && state.body != '' ){
+      print('------------------------------------------------------------송신');
+      print(state.title);
+      print(state.body);
+      print(state.category);
+      try{
         await PostPosting.postPosting(
             owner_id: 1,
             title: state.title ?? '제목없음',
@@ -62,26 +54,31 @@
             category: state.category,
             imagePaths: null ?? state.imagePaths
         );
-        ref.invalidate(PostingProvider);
-        Navigator.pop(context);
-      }
-    }
+      }
+      catch(err){
+        //오류처리
+        print(err);
+      }
+      ref.invalidate(PostingProvider);
+      Navigator.pop(context);
+    }
+  }
 
+
+  @override
+  Widget build(BuildContext context, WidgetRef ref) {
+    ref.invalidate(PostingProvider);
+    //postProvider 초기화
+
     return Scaffold(
-        appBar: PostAppBar( postPostingData ),
+        appBar: PostAppBar( ()=> postPostingData(context, ref) ),
         body: GestureDetector(
           onDoubleTap: (){
             FocusManager.instance.primaryFocus?.unfocus();
           },
           child: Container(
             color: WHITE,
-            child: Column(
-              children: [
-                Expanded(
-                    child: _Body()),
-                _BottomAppBar()
-              ],
-            ),
+            child: _Body(),
           ),
         ),
       resizeToAvoidBottomInset: false,
@@ -95,37 +92,41 @@
   @override
   Widget build(BuildContext context, WidgetRef ref) {
     final state = ref.watch(PostingProvider);
-    return SingleChildScrollView(
-      child: Padding(
-        padding: EdgeInsets.symmetric(
-            horizontal: 20,
-            vertical: 20
-        ),
-        child: Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            Padding(padding: EdgeInsets.only(bottom: 10)),
-            TitleInput(),
-
-            Padding(padding: EdgeInsets.only(bottom: 10)),
-            Column(
-              crossAxisAlignment: CrossAxisAlignment.start,
-              mainAxisSize: MainAxisSize.max,
-              children: [
-                Padding(
-                  padding: EdgeInsets.only(bottom: 10),
-                  child: state.imagePaths != null ?
-                  Column(
-                      children: state.imagePaths!.map(
-                              (e) => Image.file(File(e), width: 300, height: 300, fit: BoxFit.fitWidth,)).toList()
-                  ) : null,
-                ),
-                BodyInput()
-              ],
-            ),
-          ],
-        ),
-      ),
+    return Column(
+      children: [
+        Expanded(
+          child: SingleChildScrollView(
+            child: Padding(
+              padding: const EdgeInsets.all(20.0),
+              child: Column(
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  Padding(padding: EdgeInsets.only(bottom: 10)),
+                  TitleInput(),
+                
+                  Padding(padding: EdgeInsets.only(bottom: 10)),
+                  Column(
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    mainAxisSize: MainAxisSize.max,
+                    children: [
+                      Padding(
+                        padding: EdgeInsets.only(bottom: 10),
+                        child: state.imagePaths != null ?
+                        Column(
+                            children: state.imagePaths!.map(
+                                    (e) => Image.file(File(e), width: 300, height: 300, fit: BoxFit.cover,)).toList()
+                        ) : null,
+                      ),
+                      BodyInput()
+                    ],
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+        _BottomAppBar()
+      ],
     );
   }
 }
@@ -202,16 +203,17 @@
 
 class _BottomAppBar extends ConsumerWidget {
 
+  final heightProvider = StateProvider<bool>((ref) => false);
 
   @override
   Widget build(BuildContext context, WidgetRef ref) {
-
+    final state = ref.watch(heightProvider);
     return Container(
       padding: EdgeInsets.only(
           right: 10,
           left: 10,
           // 하단 탭바 높이만큼 더 올라가더라,, 그거 빼줘야함
-          bottom:MediaQuery.of(context).viewInsets.bottom + 10 ,
+          bottom: MediaQuery.of(context).viewInsets.bottom > 0 ? MediaQuery.of(context).viewInsets.bottom - 50 : 10,
           top: 10 ),
       decoration: const BoxDecoration(
           border: Border(
@@ -229,7 +231,7 @@
               final List<XFile>? images = await picker.pickMultiImage();
               if(images != null) {
                 final imagePaths = images.map((e) => e.path).toList();
-                ref.watch(PostingProvider.notifier).updatePosting(
+                ref.read(PostingProvider.notifier).updatePosting(
                     images: imagePaths);
               }
             }, icon: const Icon(Icons.camera_alt),color: PRIMARY_COLOR,),
@@ -243,10 +245,8 @@
 }
 
 class PostCategoryWidget extends ConsumerWidget {
-
   const PostCategoryWidget({super.key,});
 
-
   @override
   Widget build(BuildContext context, WidgetRef ref) {
     final state = ref.watch(PostingProvider);
@@ -270,6 +270,7 @@
                   ),
                     onPressed: () {
                       ref.watch(PostingProvider.notifier).updatePosting(category: categoryName);
+                      print(state.category);
                     },
                     child: Text(categoryName,
                         style: TextStyle(
